{"ast":null,"code":"export const getRecommendations = async user => {\n  console.log(\"🔍 Danh sách following truyền vào:\", user.following);\n  const {\n    address,\n    preferences,\n    following\n  } = user; // Lấy danh sách following từ user\n\n  // Lấy danh sách tất cả restaurant & user thường\n  const allRestaurants = await fetch('http://localhost:5000/api/user/restaurants').then(res => res.json());\n  console.log(\"recommend res:\", allRestaurants);\n  const allNormalUsers = await fetch('http://localhost:5000/api/user/normal-users').then(res => res.json());\n  console.log(\"recommend normal:\", allNormalUsers);\n\n  // Loại bỏ những người đã follow\n  const unfollowedNormalUsers = allNormalUsers.filter(normalUser => !following.includes(normalUser._id));\n\n  // Lọc người dùng có sở thích chung\n  let filteredNormalUsers = unfollowedNormalUsers.filter(normalUser => preferences.some(pref => normalUser.preferences.includes(pref)));\n  console.log(\"filtered normal users:\", filteredNormalUsers);\n  let filteredRestaurants = allRestaurants.filter(restaurant => preferences.some(pref => restaurant.foodTypes.includes(pref)));\n\n  // Nếu không có sở thích chung, chọn ngẫu nhiên\n  if (filteredRestaurants.length === 0) {\n    filteredRestaurants = allRestaurants.sort(() => Math.random() - 0.5).slice(0, 5);\n  } else {\n    filteredRestaurants = filteredRestaurants.sort((a, b) => b.rating - a.rating).slice(0, 5);\n  }\n  if (filteredNormalUsers.length === 0) {\n    filteredNormalUsers = unfollowedNormalUsers.sort(() => Math.random() - 0.5).slice(0, 5);\n  } else {\n    filteredNormalUsers = filteredNormalUsers.sort((a, b) => b.points - a.points).slice(0, 5);\n  }\n  return {\n    restaurants: filteredRestaurants,\n    normalUsers: filteredNormalUsers\n  };\n};","map":{"version":3,"names":["getRecommendations","user","console","log","following","address","preferences","allRestaurants","fetch","then","res","json","allNormalUsers","unfollowedNormalUsers","filter","normalUser","includes","_id","filteredNormalUsers","some","pref","filteredRestaurants","restaurant","foodTypes","length","sort","Math","random","slice","a","b","rating","points","restaurants","normalUsers"],"sources":["F:/DACN/do-an/Frontend/src/utils/recommendations.js"],"sourcesContent":["export const getRecommendations = async (user) => {\r\n  console.log(\"🔍 Danh sách following truyền vào:\", user.following);\r\n  const { address, preferences, following } = user; // Lấy danh sách following từ user\r\n\r\n  // Lấy danh sách tất cả restaurant & user thường\r\n  const allRestaurants = await fetch('http://localhost:5000/api/user/restaurants').then(res => res.json());\r\n  console.log(\"recommend res:\", allRestaurants);\r\n\r\n  const allNormalUsers = await fetch('http://localhost:5000/api/user/normal-users').then(res => res.json());\r\n  console.log(\"recommend normal:\", allNormalUsers);\r\n\r\n  // Loại bỏ những người đã follow\r\n  const unfollowedNormalUsers = allNormalUsers.filter(normalUser => !following.includes(normalUser._id));\r\n\r\n  // Lọc người dùng có sở thích chung\r\n  let filteredNormalUsers = unfollowedNormalUsers.filter(normalUser =>\r\n    preferences.some(pref => normalUser.preferences.includes(pref))\r\n  );\r\n  console.log(\"filtered normal users:\", filteredNormalUsers);\r\n\r\n  let filteredRestaurants = allRestaurants.filter(restaurant =>\r\n    preferences.some(pref => restaurant.foodTypes.includes(pref))\r\n  );\r\n\r\n  // Nếu không có sở thích chung, chọn ngẫu nhiên\r\n  if (filteredRestaurants.length === 0) {\r\n    filteredRestaurants = allRestaurants.sort(() => Math.random() - 0.5).slice(0, 5);\r\n  } else {\r\n    filteredRestaurants = filteredRestaurants.sort((a, b) => b.rating - a.rating).slice(0, 5);\r\n  }\r\n\r\n  if (filteredNormalUsers.length === 0) {\r\n    filteredNormalUsers = unfollowedNormalUsers.sort(() => Math.random() - 0.5).slice(0, 5);\r\n  } else {\r\n    filteredNormalUsers = filteredNormalUsers.sort((a, b) => b.points - a.points).slice(0, 5);\r\n  }\r\n\r\n  return { restaurants: filteredRestaurants, normalUsers: filteredNormalUsers };\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,kBAAkB,GAAG,MAAOC,IAAI,IAAK;EAChDC,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEF,IAAI,CAACG,SAAS,CAAC;EACjE,MAAM;IAAEC,OAAO;IAAEC,WAAW;IAAEF;EAAU,CAAC,GAAGH,IAAI,CAAC,CAAC;;EAElD;EACA,MAAMM,cAAc,GAAG,MAAMC,KAAK,CAAC,4CAA4C,CAAC,CAACC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;EACxGT,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEI,cAAc,CAAC;EAE7C,MAAMK,cAAc,GAAG,MAAMJ,KAAK,CAAC,6CAA6C,CAAC,CAACC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;EACzGT,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAES,cAAc,CAAC;;EAEhD;EACA,MAAMC,qBAAqB,GAAGD,cAAc,CAACE,MAAM,CAACC,UAAU,IAAI,CAACX,SAAS,CAACY,QAAQ,CAACD,UAAU,CAACE,GAAG,CAAC,CAAC;;EAEtG;EACA,IAAIC,mBAAmB,GAAGL,qBAAqB,CAACC,MAAM,CAACC,UAAU,IAC/DT,WAAW,CAACa,IAAI,CAACC,IAAI,IAAIL,UAAU,CAACT,WAAW,CAACU,QAAQ,CAACI,IAAI,CAAC,CAChE,CAAC;EACDlB,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEe,mBAAmB,CAAC;EAE1D,IAAIG,mBAAmB,GAAGd,cAAc,CAACO,MAAM,CAACQ,UAAU,IACxDhB,WAAW,CAACa,IAAI,CAACC,IAAI,IAAIE,UAAU,CAACC,SAAS,CAACP,QAAQ,CAACI,IAAI,CAAC,CAC9D,CAAC;;EAED;EACA,IAAIC,mBAAmB,CAACG,MAAM,KAAK,CAAC,EAAE;IACpCH,mBAAmB,GAAGd,cAAc,CAACkB,IAAI,CAAC,MAAMC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EAClF,CAAC,MAAM;IACLP,mBAAmB,GAAGA,mBAAmB,CAACI,IAAI,CAAC,CAACI,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACC,MAAM,GAAGF,CAAC,CAACE,MAAM,CAAC,CAACH,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EAC3F;EAEA,IAAIV,mBAAmB,CAACM,MAAM,KAAK,CAAC,EAAE;IACpCN,mBAAmB,GAAGL,qBAAqB,CAACY,IAAI,CAAC,MAAMC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EACzF,CAAC,MAAM;IACLV,mBAAmB,GAAGA,mBAAmB,CAACO,IAAI,CAAC,CAACI,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACE,MAAM,GAAGH,CAAC,CAACG,MAAM,CAAC,CAACJ,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EAC3F;EAEA,OAAO;IAAEK,WAAW,EAAEZ,mBAAmB;IAAEa,WAAW,EAAEhB;EAAoB,CAAC;AAC/E,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}