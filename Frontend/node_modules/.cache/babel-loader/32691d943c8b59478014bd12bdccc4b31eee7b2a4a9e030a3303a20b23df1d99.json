{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import \"./Sugesstions.css\";\n// import AccountUser from \"../components/AccountUser\";\n// import { Avatar, CircularProgress } from \"@mui/material\";\n// import { getRecommendations } from \"../utils/recommendations\";\n// import { useSelector } from \"react-redux\";\n\n// function Sugesstions() {\n//   // Lấy user từ Redux; đảm bảo user có trường following (nếu chưa có, dùng mảng rỗng)\n//   const userFromRedux = useSelector((state) => state.user.user) || {};\n//   const currentUser = { ...userFromRedux, following: userFromRedux.following || [] };\n\n//   const [suggestions, setSuggestions] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [followedAccounts, setFollowedAccounts] = useState(new Set());\n\n//   // Hàm lấy danh sách đã follow từ API\n//   const fetchFollowedUsers = async () => {\n//     try {\n//       const response = await fetch(\"http://localhost:5000/api/user/followed\", {\n//         headers: { \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}` },\n//       });\n//       if (response.ok) {\n//         const data = await response.json();\n//         console.log(\"API Followed Users Response:\", data);\n//         // Giả sử API trả về { following: [ ... ] }\n//         const followed = Array.isArray(data.following) ? data.following.map(user => user._id.toString()) : [];\n//         setFollowedAccounts(new Set(followed));\n//       } else {\n//         console.error(\"Không lấy được danh sách đã follow\");\n//       }\n//     } catch (error) {\n//       console.error(\"Lỗi khi lấy danh sách follow:\", error);\n//     }\n//   };\n\n//   // Hàm lấy gợi ý từ API dựa trên hàm getRecommendations của bạn\n//   const fetchSuggestions = async () => {\n//     setLoading(true);\n//     try {\n//       // Đảm bảo user có trường following từ Redux (nếu có, thì dùng nó; nếu không, sử dụng danh sách vừa fetch được)\n//       await fetchFollowedUsers();\n//       // Nếu Redux user chưa có dữ liệu followed, ta có thể cập nhật lại currentUser.following từ followedAccounts\n//       const updatedUser = { ...currentUser, following: Array.from(followedAccounts) };\n//       const recommendations = await getRecommendations(updatedUser);\n//       console.log(\"Recommendations:\", recommendations);\n//       // getRecommendations trả về { restaurants, normalUsers }\n//       // Ghép 2 danh sách lại (chúng đã được lọc theo following bên trong getRecommendations nếu user.following có)\n//       let combined = [...(recommendations.restaurants || []), ...(recommendations.normalUsers || [])];\n//       // Nếu bạn muốn đảm bảo không có tài khoản đã follow (nếu Redux user chưa được cập nhật), lọc lại:\n//       combined = combined.filter(sugg => !followedAccounts.has(sugg._id.toString()));\n//       // Giới hạn 5 gợi ý\n//       setSuggestions(combined.slice(0, 5));\n//     } catch (error) {\n//       console.error(\"Lỗi khi lấy gợi ý:\", error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     if (currentUser && Object.keys(currentUser).length > 0) {\n//       fetchSuggestions();\n//     }\n//     // Chỉ chạy một lần khi user thay đổi\n//   }, [currentUser]);\n\n//   const handleFollow = async (accountId) => {\n//     try {\n//       const response = await fetch(`http://localhost:5000/api/user/follow/${accountId}`, {\n//         method: \"POST\",\n//         headers: {\n//           \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`,\n//           \"Content-Type\": \"application/json\"\n//         },\n//       });\n\n//       if (response.ok) {\n//         console.log(`Đã follow user: ${accountId}`);\n//         // Cập nhật state local để hiển thị trạng thái Follow\n//         setFollowedAccounts((prev) => new Set([...prev, accountId.toString()]));\n//         // Nếu muốn cập nhật lại gợi ý, bạn có thể gọi fetchSuggestions() hoặc tự lọc suggestions hiện tại\n//         setSuggestions(prev => prev.filter(sugg => sugg._id.toString() !== accountId.toString()));\n//       } else {\n//         console.error(\"Follow thất bại:\", await response.json());\n//       }\n//     } catch (error) {\n//       console.error(\"Follow thất bại:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"sugesstions\">\n//       <div className=\"account__username\">\n//         <div className=\"account__left\">\n//           <span className=\"avatar__profile\">\n//             <Avatar style={{ width: \"50px\", height: \"50px\" }}>R</Avatar>\n//           </span>\n//           <div className=\"username__info\">\n//             <span className=\"username__profile\">{currentUser.username || \"_username\"}</span>\n//             <span className=\"profilename\">{currentUser.name || \"User Name\"}</span>\n//           </div>\n//         </div>\n//         <button className=\"switch__button\">Switch</button>\n//       </div>\n\n//       <div className=\"sugesstions__title\">Suggestions for you</div>\n\n//       {loading ? (\n//         <div className=\"loading-spinner\">\n//           <CircularProgress />\n//         </div>\n//       ) : (\n//         <div className=\"sugesstions__usernames\">\n//           {suggestions.length === 0 ? (\n//             <p>No suggestions available.</p>\n//           ) : (\n//             suggestions.map((sugg) => (\n//               <AccountUser\n//                 key={sugg._id}\n//                 username={sugg.username}\n//                 nickname={sugg.nickname || \"User\"}\n//                 isFollowed={followedAccounts.has(sugg._id.toString())}\n//                 onFollow={() => handleFollow(sugg._id)}\n//               />\n//             ))\n//           )}\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default Sugesstions;","map":{"version":3,"names":[],"sources":["F:/DACN/do-an/Frontend/src/timeline/Sugesstions.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import \"./Sugesstions.css\";\r\n// import AccountUser from \"../components/AccountUser\";\r\n// import { Avatar, CircularProgress } from \"@mui/material\";\r\n// import { getRecommendations } from \"../utils/recommendations\";\r\n// import { useSelector } from \"react-redux\";\r\n\r\n// function Sugesstions() {\r\n//   // Lấy user từ Redux; đảm bảo user có trường following (nếu chưa có, dùng mảng rỗng)\r\n//   const userFromRedux = useSelector((state) => state.user.user) || {};\r\n//   const currentUser = { ...userFromRedux, following: userFromRedux.following || [] };\r\n\r\n//   const [suggestions, setSuggestions] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [followedAccounts, setFollowedAccounts] = useState(new Set());\r\n\r\n//   // Hàm lấy danh sách đã follow từ API\r\n//   const fetchFollowedUsers = async () => {\r\n//     try {\r\n//       const response = await fetch(\"http://localhost:5000/api/user/followed\", {\r\n//         headers: { \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}` },\r\n//       });\r\n//       if (response.ok) {\r\n//         const data = await response.json();\r\n//         console.log(\"API Followed Users Response:\", data);\r\n//         // Giả sử API trả về { following: [ ... ] }\r\n//         const followed = Array.isArray(data.following) ? data.following.map(user => user._id.toString()) : [];\r\n//         setFollowedAccounts(new Set(followed));\r\n//       } else {\r\n//         console.error(\"Không lấy được danh sách đã follow\");\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Lỗi khi lấy danh sách follow:\", error);\r\n//     }\r\n//   };\r\n\r\n//   // Hàm lấy gợi ý từ API dựa trên hàm getRecommendations của bạn\r\n//   const fetchSuggestions = async () => {\r\n//     setLoading(true);\r\n//     try {\r\n//       // Đảm bảo user có trường following từ Redux (nếu có, thì dùng nó; nếu không, sử dụng danh sách vừa fetch được)\r\n//       await fetchFollowedUsers();\r\n//       // Nếu Redux user chưa có dữ liệu followed, ta có thể cập nhật lại currentUser.following từ followedAccounts\r\n//       const updatedUser = { ...currentUser, following: Array.from(followedAccounts) };\r\n//       const recommendations = await getRecommendations(updatedUser);\r\n//       console.log(\"Recommendations:\", recommendations);\r\n//       // getRecommendations trả về { restaurants, normalUsers }\r\n//       // Ghép 2 danh sách lại (chúng đã được lọc theo following bên trong getRecommendations nếu user.following có)\r\n//       let combined = [...(recommendations.restaurants || []), ...(recommendations.normalUsers || [])];\r\n//       // Nếu bạn muốn đảm bảo không có tài khoản đã follow (nếu Redux user chưa được cập nhật), lọc lại:\r\n//       combined = combined.filter(sugg => !followedAccounts.has(sugg._id.toString()));\r\n//       // Giới hạn 5 gợi ý\r\n//       setSuggestions(combined.slice(0, 5));\r\n//     } catch (error) {\r\n//       console.error(\"Lỗi khi lấy gợi ý:\", error);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     if (currentUser && Object.keys(currentUser).length > 0) {\r\n//       fetchSuggestions();\r\n//     }\r\n//     // Chỉ chạy một lần khi user thay đổi\r\n//   }, [currentUser]);\r\n\r\n//   const handleFollow = async (accountId) => {\r\n//     try {\r\n//       const response = await fetch(`http://localhost:5000/api/user/follow/${accountId}`, {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//           \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`,\r\n//           \"Content-Type\": \"application/json\"\r\n//         },\r\n//       });\r\n\r\n//       if (response.ok) {\r\n//         console.log(`Đã follow user: ${accountId}`);\r\n//         // Cập nhật state local để hiển thị trạng thái Follow\r\n//         setFollowedAccounts((prev) => new Set([...prev, accountId.toString()]));\r\n//         // Nếu muốn cập nhật lại gợi ý, bạn có thể gọi fetchSuggestions() hoặc tự lọc suggestions hiện tại\r\n//         setSuggestions(prev => prev.filter(sugg => sugg._id.toString() !== accountId.toString()));\r\n//       } else {\r\n//         console.error(\"Follow thất bại:\", await response.json());\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Follow thất bại:\", error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"sugesstions\">\r\n//       <div className=\"account__username\">\r\n//         <div className=\"account__left\">\r\n//           <span className=\"avatar__profile\">\r\n//             <Avatar style={{ width: \"50px\", height: \"50px\" }}>R</Avatar>\r\n//           </span>\r\n//           <div className=\"username__info\">\r\n//             <span className=\"username__profile\">{currentUser.username || \"_username\"}</span>\r\n//             <span className=\"profilename\">{currentUser.name || \"User Name\"}</span>\r\n//           </div>\r\n//         </div>\r\n//         <button className=\"switch__button\">Switch</button>\r\n//       </div>\r\n\r\n//       <div className=\"sugesstions__title\">Suggestions for you</div>\r\n\r\n//       {loading ? (\r\n//         <div className=\"loading-spinner\">\r\n//           <CircularProgress />\r\n//         </div>\r\n//       ) : (\r\n//         <div className=\"sugesstions__usernames\">\r\n//           {suggestions.length === 0 ? (\r\n//             <p>No suggestions available.</p>\r\n//           ) : (\r\n//             suggestions.map((sugg) => (\r\n//               <AccountUser\r\n//                 key={sugg._id}\r\n//                 username={sugg.username}\r\n//                 nickname={sugg.nickname || \"User\"}\r\n//                 isFollowed={followedAccounts.has(sugg._id.toString())}\r\n//                 onFollow={() => handleFollow(sugg._id)}\r\n//               />\r\n//             ))\r\n//           )}\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Sugesstions;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}