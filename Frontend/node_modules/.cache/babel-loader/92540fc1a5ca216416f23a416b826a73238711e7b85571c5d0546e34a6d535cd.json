{"ast":null,"code":"export const getRecommendations = async user => {\n  const {\n    address,\n    preferences,\n    following\n  } = user;\n  console.log(\"🔥 Danh sách following nhận từ Reddit:\", following);\n  const allRestaurants = await fetch('http://localhost:5000/api/user/restaurants').then(res => res.json());\n  const allNormalUsers = await fetch('http://localhost:5000/api/user/normal-users').then(res => res.json());\n\n  // Loại bỏ những người đã follow cho cả hai loại\n  const unfollowedNormalUsers = allNormalUsers.filter(normalUser => !following.includes(normalUser._id.toString()));\n  const unfollowedRestaurants = allRestaurants.filter(restaurant => !following.includes(restaurant._id.toString()));\n\n  // Lọc người dùng có sở thích chung\n  let filteredNormalUsers = unfollowedNormalUsers.filter(normalUser => preferences.some(pref => normalUser.preferences.includes(pref)));\n  let filteredRestaurants = unfollowedRestaurants.filter(restaurant => preferences.some(pref => restaurant.foodTypes.includes(pref)));\n\n  // Nếu không có sở thích chung, chọn ngẫu nhiên\n  if (filteredRestaurants.length === 0) {\n    filteredRestaurants = unfollowedRestaurants.sort(() => Math.random() - 0.5).slice(0, 5);\n  } else {\n    filteredRestaurants = filteredRestaurants.sort((a, b) => b.rating - a.rating).slice(0, 5);\n  }\n  if (filteredNormalUsers.length === 0) {\n    filteredNormalUsers = unfollowedNormalUsers.sort(() => Math.random() - 0.5).slice(0, 5);\n  } else {\n    filteredNormalUsers = filteredNormalUsers.sort((a, b) => b.points - a.points).slice(0, 5);\n  }\n  return {\n    restaurants: filteredRestaurants,\n    normalUsers: filteredNormalUsers\n  };\n};","map":{"version":3,"names":["getRecommendations","user","address","preferences","following","console","log","allRestaurants","fetch","then","res","json","allNormalUsers","unfollowedNormalUsers","filter","normalUser","includes","_id","toString","unfollowedRestaurants","restaurant","filteredNormalUsers","some","pref","filteredRestaurants","foodTypes","length","sort","Math","random","slice","a","b","rating","points","restaurants","normalUsers"],"sources":["F:/DACN/do-an/Frontend/src/utils/recommendations.js"],"sourcesContent":["export const getRecommendations = async (user) => {\r\n  const { address, preferences, following } = user;\r\n  console.log(\"🔥 Danh sách following nhận từ Reddit:\", following);\r\n\r\n  const allRestaurants = await fetch('http://localhost:5000/api/user/restaurants').then(res => res.json());\r\n  const allNormalUsers = await fetch('http://localhost:5000/api/user/normal-users').then(res => res.json());\r\n\r\n  // Loại bỏ những người đã follow cho cả hai loại\r\n  const unfollowedNormalUsers = allNormalUsers.filter(normalUser => !following.includes(normalUser._id.toString()));\r\n  const unfollowedRestaurants = allRestaurants.filter(restaurant => !following.includes(restaurant._id.toString()));\r\n\r\n  // Lọc người dùng có sở thích chung\r\n  let filteredNormalUsers = unfollowedNormalUsers.filter(normalUser =>\r\n    preferences.some(pref => normalUser.preferences.includes(pref))\r\n  );\r\n\r\n  let filteredRestaurants = unfollowedRestaurants.filter(restaurant =>\r\n    preferences.some(pref => restaurant.foodTypes.includes(pref))\r\n  );\r\n\r\n  // Nếu không có sở thích chung, chọn ngẫu nhiên\r\n  if (filteredRestaurants.length === 0) {\r\n    filteredRestaurants = unfollowedRestaurants.sort(() => Math.random() - 0.5).slice(0, 5);\r\n  } else {\r\n    filteredRestaurants = filteredRestaurants.sort((a, b) => b.rating - a.rating).slice(0, 5);\r\n  }\r\n\r\n  if (filteredNormalUsers.length === 0) {\r\n    filteredNormalUsers = unfollowedNormalUsers.sort(() => Math.random() - 0.5).slice(0, 5);\r\n  } else {\r\n    filteredNormalUsers = filteredNormalUsers.sort((a, b) => b.points - a.points).slice(0, 5);\r\n  }\r\n\r\n  return { restaurants: filteredRestaurants, normalUsers: filteredNormalUsers };\r\n};"],"mappings":"AAAA,OAAO,MAAMA,kBAAkB,GAAG,MAAOC,IAAI,IAAK;EAChD,MAAM;IAAEC,OAAO;IAAEC,WAAW;IAAEC;EAAU,CAAC,GAAGH,IAAI;EAChDI,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEF,SAAS,CAAC;EAEhE,MAAMG,cAAc,GAAG,MAAMC,KAAK,CAAC,4CAA4C,CAAC,CAACC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;EACxG,MAAMC,cAAc,GAAG,MAAMJ,KAAK,CAAC,6CAA6C,CAAC,CAACC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;;EAEzG;EACA,MAAME,qBAAqB,GAAGD,cAAc,CAACE,MAAM,CAACC,UAAU,IAAI,CAACX,SAAS,CAACY,QAAQ,CAACD,UAAU,CAACE,GAAG,CAACC,QAAQ,CAAC,CAAC,CAAC,CAAC;EACjH,MAAMC,qBAAqB,GAAGZ,cAAc,CAACO,MAAM,CAACM,UAAU,IAAI,CAAChB,SAAS,CAACY,QAAQ,CAACI,UAAU,CAACH,GAAG,CAACC,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEjH;EACA,IAAIG,mBAAmB,GAAGR,qBAAqB,CAACC,MAAM,CAACC,UAAU,IAC/DZ,WAAW,CAACmB,IAAI,CAACC,IAAI,IAAIR,UAAU,CAACZ,WAAW,CAACa,QAAQ,CAACO,IAAI,CAAC,CAChE,CAAC;EAED,IAAIC,mBAAmB,GAAGL,qBAAqB,CAACL,MAAM,CAACM,UAAU,IAC/DjB,WAAW,CAACmB,IAAI,CAACC,IAAI,IAAIH,UAAU,CAACK,SAAS,CAACT,QAAQ,CAACO,IAAI,CAAC,CAC9D,CAAC;;EAED;EACA,IAAIC,mBAAmB,CAACE,MAAM,KAAK,CAAC,EAAE;IACpCF,mBAAmB,GAAGL,qBAAqB,CAACQ,IAAI,CAAC,MAAMC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EACzF,CAAC,MAAM;IACLN,mBAAmB,GAAGA,mBAAmB,CAACG,IAAI,CAAC,CAACI,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACC,MAAM,GAAGF,CAAC,CAACE,MAAM,CAAC,CAACH,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EAC3F;EAEA,IAAIT,mBAAmB,CAACK,MAAM,KAAK,CAAC,EAAE;IACpCL,mBAAmB,GAAGR,qBAAqB,CAACc,IAAI,CAAC,MAAMC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EACzF,CAAC,MAAM;IACLT,mBAAmB,GAAGA,mBAAmB,CAACM,IAAI,CAAC,CAACI,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACE,MAAM,GAAGH,CAAC,CAACG,MAAM,CAAC,CAACJ,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EAC3F;EAEA,OAAO;IAAEK,WAAW,EAAEX,mBAAmB;IAAEY,WAAW,EAAEf;EAAoB,CAAC;AAC/E,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}