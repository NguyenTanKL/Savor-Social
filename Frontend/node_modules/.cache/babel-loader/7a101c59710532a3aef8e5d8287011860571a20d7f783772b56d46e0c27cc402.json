{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import \"./Sugesstions.css\";\n// import AccountUser from \"../components/AccountUser\";\n// import { Avatar, CircularProgress } from \"@mui/material\";\n// import { getRecommendations } from \"../utils/recommendations\";\n// import { useSelector, useDispatch } from 'react-redux';\n// import { updateUser } from '../../src/redux/Reducer/userSlice';\n\n// function Sugesstions() {\n//     const user = useSelector((state) => state.user.user);\n//     const dispatch = useDispatch();\n//     const [suggestions, setSuggestions] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [followedAccounts, setFollowedAccounts] = useState(new Set());\n\n//     // Lấy danh sách đã follow từ API\n//     const fetchFollowedUsers = async () => {\n//         try {\n//             const response = await fetch(\"http://localhost:5000/api/user/followed\", {\n//                 method: \"GET\",\n//                 headers: { \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}` },\n//             });\n\n//             if (response.ok) {\n//                 const data = await response.json();\n//                 setFollowedAccounts(new Set(data.following)); // Lưu danh sách đã follow vào state\n//             } else {\n//                 console.error(\"Không lấy được danh sách đã follow\");\n//             }\n//         } catch (error) {\n//             console.error(\"Lỗi khi lấy danh sách follow:\", error);\n//         }\n//     };\n\n//     // Lấy danh sách gợi ý từ API\n//     const fetchSuggestions = async () => {\n//         setLoading(true);\n//         try {\n//             const recommendations = await getRecommendations(user);\n//             const restaurantSuggestions = recommendations.restaurants || [];\n//             const normalUserSuggestions = recommendations.normalUsers || [];\n\n//             setSuggestions([...restaurantSuggestions, ...normalUserSuggestions].filter(\n//                 suggestion => !followedAccounts.has(suggestion._id.toString())\n//             ).slice(0, 5));\n//         } catch (error) {\n//             console.error(\"Lỗi khi lấy gợi ý:\", error);\n//         } finally {\n//             setLoading(false);\n//         }\n//     };\n\n//     useEffect(() => {\n//         fetchFollowedUsers();\n//         fetchSuggestions();\n//     }, [user, followedAccounts]); // Thêm followedAccounts vào dependency để reload khi follow\n\n//     // Xử lý follow\n//     const handleFollow = async (accountId) => {\n//         try {\n//             const response = await fetch(`http://localhost:5000/api/user/follow/${accountId}`, {\n//                 method: \"POST\",\n//                 headers: {\n//                     \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`,\n//                     \"Content-Type\": \"application/json\"\n//                 },\n//             });\n\n//             if (response.ok) {\n//                 // Lấy dữ liệu user cập nhật từ server\n//                 const updatedUserResponse = await fetch(\"http://localhost:5000/api/user\", {\n//                     method: \"GET\",\n//                     headers: { \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}` },\n//                 });\n//                 if (updatedUserResponse.ok) {\n//                     const updatedUser = await updatedUserResponse.json();\n//                     dispatch(updateUser(updatedUser)); // Cập nhật Redux store\n//                     setFollowedAccounts(new Set(updatedUser.following)); // Cập nhật state local\n//                 } else {\n//                     console.error(\"Không thể lấy thông tin người dùng cập nhật\");\n//                 }\n//             } else {\n//                 console.error(\"Follow thất bại:\", await response.json());\n//             }\n//         } catch (error) {\n//             console.error(\"Follow thất bại:\", error);\n//         }\n//     };\n\n//     return (\n//         <div className=\"sugesstions\">\n//             <div className=\"account__username\">\n//                 <div className=\"account__left\">\n//                     <span className=\"avatar__profile\">\n//                         <Avatar style={{ width: \"50px\", height: \"50px\" }}>R</Avatar>\n//                     </span>\n//                     <div className=\"username__info\">\n//                         <span className=\"username__profile\">_rin211</span>\n//                         <span className=\"profilename\">Huy Thai</span>\n//                     </div>\n//                 </div>\n//                 <button className=\"switch__button\">Switch</button>\n//             </div>\n\n//             <div className=\"sugesstions__title\">Suggestions for you</div>\n\n//             {loading ? (\n//                 <div className=\"loading-spinner\">\n//                     <CircularProgress />\n//                 </div>\n//             ) : (\n//                 <div className=\"sugesstions__usernames\">\n//                     {suggestions.length === 0 ? (\n//                         <p>No suggestions available.</p>\n//                     ) : (\n//                         suggestions.map((user) => (\n//                             <AccountUser\n//                                 key={user._id}\n//                                 username={user.username}\n//                                 nickname={user.nickname || \"User\"}\n//                                 isFollowed={followedAccounts.has(user._id.toString())}\n//                                 onFollow={() => handleFollow(user._id)}\n//                             />\n//                         ))\n//                     )}\n//                 </div>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default Sugesstions;","map":{"version":3,"names":[],"sources":["F:/DACN/do-an/Frontend/src/timeline/Sugesstions.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import \"./Sugesstions.css\";\r\n// import AccountUser from \"../components/AccountUser\";\r\n// import { Avatar, CircularProgress } from \"@mui/material\";\r\n// import { getRecommendations } from \"../utils/recommendations\";\r\n// import { useSelector, useDispatch } from 'react-redux';\r\n// import { updateUser } from '../../src/redux/Reducer/userSlice';\r\n\r\n// function Sugesstions() {\r\n//     const user = useSelector((state) => state.user.user);\r\n//     const dispatch = useDispatch();\r\n//     const [suggestions, setSuggestions] = useState([]);\r\n//     const [loading, setLoading] = useState(true);\r\n//     const [followedAccounts, setFollowedAccounts] = useState(new Set());\r\n\r\n//     // Lấy danh sách đã follow từ API\r\n//     const fetchFollowedUsers = async () => {\r\n//         try {\r\n//             const response = await fetch(\"http://localhost:5000/api/user/followed\", {\r\n//                 method: \"GET\",\r\n//                 headers: { \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}` },\r\n//             });\r\n\r\n//             if (response.ok) {\r\n//                 const data = await response.json();\r\n//                 setFollowedAccounts(new Set(data.following)); // Lưu danh sách đã follow vào state\r\n//             } else {\r\n//                 console.error(\"Không lấy được danh sách đã follow\");\r\n//             }\r\n//         } catch (error) {\r\n//             console.error(\"Lỗi khi lấy danh sách follow:\", error);\r\n//         }\r\n//     };\r\n\r\n//     // Lấy danh sách gợi ý từ API\r\n//     const fetchSuggestions = async () => {\r\n//         setLoading(true);\r\n//         try {\r\n//             const recommendations = await getRecommendations(user);\r\n//             const restaurantSuggestions = recommendations.restaurants || [];\r\n//             const normalUserSuggestions = recommendations.normalUsers || [];\r\n\r\n//             setSuggestions([...restaurantSuggestions, ...normalUserSuggestions].filter(\r\n//                 suggestion => !followedAccounts.has(suggestion._id.toString())\r\n//             ).slice(0, 5));\r\n//         } catch (error) {\r\n//             console.error(\"Lỗi khi lấy gợi ý:\", error);\r\n//         } finally {\r\n//             setLoading(false);\r\n//         }\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         fetchFollowedUsers();\r\n//         fetchSuggestions();\r\n//     }, [user, followedAccounts]); // Thêm followedAccounts vào dependency để reload khi follow\r\n\r\n//     // Xử lý follow\r\n//     const handleFollow = async (accountId) => {\r\n//         try {\r\n//             const response = await fetch(`http://localhost:5000/api/user/follow/${accountId}`, {\r\n//                 method: \"POST\",\r\n//                 headers: {\r\n//                     \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`,\r\n//                     \"Content-Type\": \"application/json\"\r\n//                 },\r\n//             });\r\n\r\n//             if (response.ok) {\r\n//                 // Lấy dữ liệu user cập nhật từ server\r\n//                 const updatedUserResponse = await fetch(\"http://localhost:5000/api/user\", {\r\n//                     method: \"GET\",\r\n//                     headers: { \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}` },\r\n//                 });\r\n//                 if (updatedUserResponse.ok) {\r\n//                     const updatedUser = await updatedUserResponse.json();\r\n//                     dispatch(updateUser(updatedUser)); // Cập nhật Redux store\r\n//                     setFollowedAccounts(new Set(updatedUser.following)); // Cập nhật state local\r\n//                 } else {\r\n//                     console.error(\"Không thể lấy thông tin người dùng cập nhật\");\r\n//                 }\r\n//             } else {\r\n//                 console.error(\"Follow thất bại:\", await response.json());\r\n//             }\r\n//         } catch (error) {\r\n//             console.error(\"Follow thất bại:\", error);\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"sugesstions\">\r\n//             <div className=\"account__username\">\r\n//                 <div className=\"account__left\">\r\n//                     <span className=\"avatar__profile\">\r\n//                         <Avatar style={{ width: \"50px\", height: \"50px\" }}>R</Avatar>\r\n//                     </span>\r\n//                     <div className=\"username__info\">\r\n//                         <span className=\"username__profile\">_rin211</span>\r\n//                         <span className=\"profilename\">Huy Thai</span>\r\n//                     </div>\r\n//                 </div>\r\n//                 <button className=\"switch__button\">Switch</button>\r\n//             </div>\r\n\r\n//             <div className=\"sugesstions__title\">Suggestions for you</div>\r\n\r\n//             {loading ? (\r\n//                 <div className=\"loading-spinner\">\r\n//                     <CircularProgress />\r\n//                 </div>\r\n//             ) : (\r\n//                 <div className=\"sugesstions__usernames\">\r\n//                     {suggestions.length === 0 ? (\r\n//                         <p>No suggestions available.</p>\r\n//                     ) : (\r\n//                         suggestions.map((user) => (\r\n//                             <AccountUser\r\n//                                 key={user._id}\r\n//                                 username={user.username}\r\n//                                 nickname={user.nickname || \"User\"}\r\n//                                 isFollowed={followedAccounts.has(user._id.toString())}\r\n//                                 onFollow={() => handleFollow(user._id)}\r\n//                             />\r\n//                         ))\r\n//                     )}\r\n//                 </div>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default Sugesstions;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}